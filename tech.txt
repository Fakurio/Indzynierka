real time chat -> pusher or ably api
notifications -> ably


notification:
Backend Implementation:

Set up a WebSocket server in your backend application using a library like Socket.IO (for Node.js) or WebSocket API (for other languages/frameworks).

When a user logs into the system, fetch the history of previously sent notifications from the database and send them to the user via the WebSocket connection.

Listen for new notifications in real time. When a new notification is created, store it in the database and send it to all connected clients via the WebSocket connection.

Frontend Implementation:

Establish a WebSocket connection with the backend server when the user logs into the system.

Receive the history of previously sent notifications from the backend via the WebSocket connection and display them to the user.

Listen for new notifications in real time using the WebSocket connection. When a new notification is received, update the UI to display the new notification.

Database Implementation:

Use a database (e.g., MySQL, MongoDB) to store the history of notifications.

Store each notification in the database with relevant information such as message content, sender, recipient, timestamp, etc.


chat:
CREATE TABLE messages (
    message_id INT PRIMARY KEY AUTO_INCREMENT,
    sender_id INT NOT NULL,
    receiver_id INT NOT NULL,
    message_text TEXT NOT NULL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (sender_id) REFERENCES users(user_id),
    FOREIGN KEY (receiver_id) REFERENCES users(user_id)
);

SELECT m.message_id, m.sender_id, m.receiver_id, m.message_text, m.timestamp
FROM messages m
INNER JOIN users u_sender ON m.sender_id = u_sender.user_id
INNER JOIN users u_receiver ON m.receiver_id = u_receiver.user_id
WHERE (u_sender.username = 'Kamil' OR u_receiver.username = 'Kamil')
AND (u_sender.username != 'Kamil' OR u_receiver.username != 'Kamil')
ORDER BY m.timestamp;

function groupMessages(messages, bySender = true) {
  const groupedMessages = new Map();
  messages.forEach(message => {
    const key = bySender ? message.sender_id : message.receiver_id;
    if (!groupedMessages.has(key)) {
      groupedMessages.set(key, []);
    }
    groupedMessages.get(key).push(message);
  });
  return groupedMessages;
}